// Code generated by mockery v2.53.3. DO NOT EDIT.

package copy

import mock "github.com/stretchr/testify/mock"

// MockCopier is an autogenerated mock type for the Copier type
type MockCopier struct {
	mock.Mock
}

type MockCopier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCopier) EXPECT() *MockCopier_Expecter {
	return &MockCopier_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: src, dest, filesystem
func (_m *MockCopier) Execute(src string, dest string, filesystem Filesystem) error {
	ret := _m.Called(src, dest, filesystem)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, Filesystem) error); ok {
		r0 = rf(src, dest, filesystem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCopier_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCopier_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - src string
//   - dest string
//   - filesystem Filesystem
func (_e *MockCopier_Expecter) Execute(src interface{}, dest interface{}, filesystem interface{}) *MockCopier_Execute_Call {
	return &MockCopier_Execute_Call{Call: _e.mock.On("Execute", src, dest, filesystem)}
}

func (_c *MockCopier_Execute_Call) Run(run func(src string, dest string, filesystem Filesystem)) *MockCopier_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(Filesystem))
	})
	return _c
}

func (_c *MockCopier_Execute_Call) Return(_a0 error) *MockCopier_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCopier_Execute_Call) RunAndReturn(run func(string, string, Filesystem) error) *MockCopier_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCopier creates a new instance of MockCopier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCopier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCopier {
	mock := &MockCopier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
