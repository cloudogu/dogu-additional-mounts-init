// Code generated by mockery v2.53.3. DO NOT EDIT.

package copy

import (
	io "io"
	fs "io/fs"

	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockFilesystem is an autogenerated mock type for the Filesystem type
type MockFilesystem struct {
	mock.Mock
}

type MockFilesystem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilesystem) EXPECT() *MockFilesystem_Expecter {
	return &MockFilesystem_Expecter{mock: &_m.Mock}
}

// CloseFile provides a mock function with given fields: file
func (_m *MockFilesystem) CloseFile(file *os.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for CloseFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*os.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesystem_CloseFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseFile'
type MockFilesystem_CloseFile_Call struct {
	*mock.Call
}

// CloseFile is a helper method to define mock.On call
//   - file *os.File
func (_e *MockFilesystem_Expecter) CloseFile(file interface{}) *MockFilesystem_CloseFile_Call {
	return &MockFilesystem_CloseFile_Call{Call: _e.mock.On("CloseFile", file)}
}

func (_c *MockFilesystem_CloseFile_Call) Run(run func(file *os.File)) *MockFilesystem_CloseFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*os.File))
	})
	return _c
}

func (_c *MockFilesystem_CloseFile_Call) Return(_a0 error) *MockFilesystem_CloseFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesystem_CloseFile_Call) RunAndReturn(run func(*os.File) error) *MockFilesystem_CloseFile_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields: dst, src
func (_m *MockFilesystem) Copy(dst io.Writer, src io.Reader) (int64, error) {
	ret := _m.Called(dst, src)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) (int64, error)); ok {
		return rf(dst, src)
	}
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) int64); ok {
		r0 = rf(dst, src)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Writer, io.Reader) error); ok {
		r1 = rf(dst, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type MockFilesystem_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - dst io.Writer
//   - src io.Reader
func (_e *MockFilesystem_Expecter) Copy(dst interface{}, src interface{}) *MockFilesystem_Copy_Call {
	return &MockFilesystem_Copy_Call{Call: _e.mock.On("Copy", dst, src)}
}

func (_c *MockFilesystem_Copy_Call) Run(run func(dst io.Writer, src io.Reader)) *MockFilesystem_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockFilesystem_Copy_Call) Return(written int64, err error) *MockFilesystem_Copy_Call {
	_c.Call.Return(written, err)
	return _c
}

func (_c *MockFilesystem_Copy_Call) RunAndReturn(run func(io.Writer, io.Reader) (int64, error)) *MockFilesystem_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: name
func (_m *MockFilesystem) Create(name string) (*os.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFilesystem_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *MockFilesystem_Expecter) Create(name interface{}) *MockFilesystem_Create_Call {
	return &MockFilesystem_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockFilesystem_Create_Call) Run(run func(name string)) *MockFilesystem_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_Create_Call) Return(_a0 *os.File, _a1 error) *MockFilesystem_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_Create_Call) RunAndReturn(run func(string) (*os.File, error)) *MockFilesystem_Create_Call {
	_c.Call.Return(run)
	return _c
}

// EvalSymlinks provides a mock function with given fields: path
func (_m *MockFilesystem) EvalSymlinks(path string) (string, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for EvalSymlinks")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_EvalSymlinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalSymlinks'
type MockFilesystem_EvalSymlinks_Call struct {
	*mock.Call
}

// EvalSymlinks is a helper method to define mock.On call
//   - path string
func (_e *MockFilesystem_Expecter) EvalSymlinks(path interface{}) *MockFilesystem_EvalSymlinks_Call {
	return &MockFilesystem_EvalSymlinks_Call{Call: _e.mock.On("EvalSymlinks", path)}
}

func (_c *MockFilesystem_EvalSymlinks_Call) Run(run func(path string)) *MockFilesystem_EvalSymlinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_EvalSymlinks_Call) Return(_a0 string, _a1 error) *MockFilesystem_EvalSymlinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_EvalSymlinks_Call) RunAndReturn(run func(string) (string, error)) *MockFilesystem_EvalSymlinks_Call {
	_c.Call.Return(run)
	return _c
}

// Lstat provides a mock function with given fields: path
func (_m *MockFilesystem) Lstat(path string) (fs.FileInfo, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Lstat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_Lstat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lstat'
type MockFilesystem_Lstat_Call struct {
	*mock.Call
}

// Lstat is a helper method to define mock.On call
//   - path string
func (_e *MockFilesystem_Expecter) Lstat(path interface{}) *MockFilesystem_Lstat_Call {
	return &MockFilesystem_Lstat_Call{Call: _e.mock.On("Lstat", path)}
}

func (_c *MockFilesystem_Lstat_Call) Run(run func(path string)) *MockFilesystem_Lstat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_Lstat_Call) Return(_a0 fs.FileInfo, _a1 error) *MockFilesystem_Lstat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_Lstat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *MockFilesystem_Lstat_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function with given fields: path, perm
func (_m *MockFilesystem) MkdirAll(path string, perm fs.FileMode) error {
	ret := _m.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesystem_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type MockFilesystem_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm fs.FileMode
func (_e *MockFilesystem_Expecter) MkdirAll(path interface{}, perm interface{}) *MockFilesystem_MkdirAll_Call {
	return &MockFilesystem_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *MockFilesystem_MkdirAll_Call) Run(run func(path string, perm fs.FileMode)) *MockFilesystem_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *MockFilesystem_MkdirAll_Call) Return(_a0 error) *MockFilesystem_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesystem_MkdirAll_Call) RunAndReturn(run func(string, fs.FileMode) error) *MockFilesystem_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: name
func (_m *MockFilesystem) Open(name string) (*os.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockFilesystem_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *MockFilesystem_Expecter) Open(name interface{}) *MockFilesystem_Open_Call {
	return &MockFilesystem_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *MockFilesystem_Open_Call) Run(run func(name string)) *MockFilesystem_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_Open_Call) Return(_a0 *os.File, _a1 error) *MockFilesystem_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_Open_Call) RunAndReturn(run func(string) (*os.File, error)) *MockFilesystem_Open_Call {
	_c.Call.Return(run)
	return _c
}

// SameFile provides a mock function with given fields: fi1, fi2
func (_m *MockFilesystem) SameFile(fi1 fs.FileInfo, fi2 fs.FileInfo) bool {
	ret := _m.Called(fi1, fi2)

	if len(ret) == 0 {
		panic("no return value specified for SameFile")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(fs.FileInfo, fs.FileInfo) bool); ok {
		r0 = rf(fi1, fi2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFilesystem_SameFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SameFile'
type MockFilesystem_SameFile_Call struct {
	*mock.Call
}

// SameFile is a helper method to define mock.On call
//   - fi1 fs.FileInfo
//   - fi2 fs.FileInfo
func (_e *MockFilesystem_Expecter) SameFile(fi1 interface{}, fi2 interface{}) *MockFilesystem_SameFile_Call {
	return &MockFilesystem_SameFile_Call{Call: _e.mock.On("SameFile", fi1, fi2)}
}

func (_c *MockFilesystem_SameFile_Call) Run(run func(fi1 fs.FileInfo, fi2 fs.FileInfo)) *MockFilesystem_SameFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FileInfo), args[1].(fs.FileInfo))
	})
	return _c
}

func (_c *MockFilesystem_SameFile_Call) Return(_a0 bool) *MockFilesystem_SameFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesystem_SameFile_Call) RunAndReturn(run func(fs.FileInfo, fs.FileInfo) bool) *MockFilesystem_SameFile_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *MockFilesystem) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFilesystem_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFilesystem_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *MockFilesystem_Expecter) Stat(name interface{}) *MockFilesystem_Stat_Call {
	return &MockFilesystem_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *MockFilesystem_Stat_Call) Run(run func(name string)) *MockFilesystem_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFilesystem_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *MockFilesystem_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilesystem_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *MockFilesystem_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// SyncFile provides a mock function with given fields: file
func (_m *MockFilesystem) SyncFile(file *os.File) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for SyncFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*os.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesystem_SyncFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncFile'
type MockFilesystem_SyncFile_Call struct {
	*mock.Call
}

// SyncFile is a helper method to define mock.On call
//   - file *os.File
func (_e *MockFilesystem_Expecter) SyncFile(file interface{}) *MockFilesystem_SyncFile_Call {
	return &MockFilesystem_SyncFile_Call{Call: _e.mock.On("SyncFile", file)}
}

func (_c *MockFilesystem_SyncFile_Call) Run(run func(file *os.File)) *MockFilesystem_SyncFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*os.File))
	})
	return _c
}

func (_c *MockFilesystem_SyncFile_Call) Return(_a0 error) *MockFilesystem_SyncFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesystem_SyncFile_Call) RunAndReturn(run func(*os.File) error) *MockFilesystem_SyncFile_Call {
	_c.Call.Return(run)
	return _c
}

// WalkDir provides a mock function with given fields: root, fn
func (_m *MockFilesystem) WalkDir(root string, fn fs.WalkDirFunc) error {
	ret := _m.Called(root, fn)

	if len(ret) == 0 {
		panic("no return value specified for WalkDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.WalkDirFunc) error); ok {
		r0 = rf(root, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesystem_WalkDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkDir'
type MockFilesystem_WalkDir_Call struct {
	*mock.Call
}

// WalkDir is a helper method to define mock.On call
//   - root string
//   - fn fs.WalkDirFunc
func (_e *MockFilesystem_Expecter) WalkDir(root interface{}, fn interface{}) *MockFilesystem_WalkDir_Call {
	return &MockFilesystem_WalkDir_Call{Call: _e.mock.On("WalkDir", root, fn)}
}

func (_c *MockFilesystem_WalkDir_Call) Run(run func(root string, fn fs.WalkDirFunc)) *MockFilesystem_WalkDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.WalkDirFunc))
	})
	return _c
}

func (_c *MockFilesystem_WalkDir_Call) Return(_a0 error) *MockFilesystem_WalkDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesystem_WalkDir_Call) RunAndReturn(run func(string, fs.WalkDirFunc) error) *MockFilesystem_WalkDir_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilesystem creates a new instance of MockFilesystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilesystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilesystem {
	mock := &MockFilesystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
